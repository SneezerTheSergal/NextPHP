<?php

namespace tool;
class GenerateAst
{
    public static function main($args) {
        var_dump($args);
        if (count($args) != 2) {
            \merp\clsMain::error(1, "Usage: generateAst [output dir]");
            exit(64);
        }
        $outputDir = $args[1];
        self::defineAst($outputDir, "Expr", [
            "Binary : Expr left, Token operator, Expr right",
            "Grouping : Expr expression",
            "Literal : Object Value",
            "Unary : Token operator, Expr right"
        ]);
    }

    private static function defineAst($outputDir, $baseName, $types) {
        $path = $outputDir . "/" . $baseName . ".php";
        $fileContent = "<?php\n\n";
        $fileContent .= "namespace classes;\n";
        $fileContent .= "//autogenerated code \n";
        $fileContent .= "interface Accept {\n"; //accept method
        $fileContent .= "   public function accept(Visitor $" . "visitor);\n"; //accept function
        $fileContent .= "}\n\n";
        $fileContent = self::defineVisitors($fileContent, $baseName, $types);
        $fileContent .= "abstract class " . $baseName . " {\n";
        $fileContent .= "}\n";

        foreach ($types as $type) {
            $parts = explode(':',$type);
            $classname = trim($parts[0]);
            $fields = trim($parts[1]);
            $fileContent .= "\n    class " . $classname .  " extends " . $baseName . " implements Accept {\n";
            $properties = explode(",", $fields);
            foreach ($properties as $property) {
                $propParts = explode(" ", $property);
                $fileContent .= "       public $" . $propParts[1] . ";\n";
            }
            $fileContent .= "       public function accept(Visitor $" . "visitor) {\n";
            $fileContent .= "           $" . "visitor->visit" . $classname . $baseName . "($" . "this);\n";
            $fileContent .= "       }\n";
            $fileContent .= "   }\n";
        }



        file_put_contents($path,$fileContent);
    }
    private static function defineVisitors($fileContent, $baseName, $types) {
        $fileContent .= "   interface Visitor { \n";
        foreach ($types as $type) {
            $parts = explode(":", $type);
            $typeName = trim($parts[0]);
            $fileContent .= "      function visit" . $typeName . $baseName . "($" . $typeName . strtolower($baseName) . ");\n";
        }
        $fileContent .= "   }\n";
        return $fileContent;
    }

}